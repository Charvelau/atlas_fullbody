/*
 * =====================================================================================
 *
 *       Filename:  Transmission.cpp
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  10/24/2013 04:37:28 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (), 
 *        Company:  
 *
 * =====================================================================================
 */

#include "Transmission.h"
#include <stdlib.h>
#include <math.h>

#define SUPPLY 3000
#define RETURN 100
#define N_lb 4.448 

int Transmission::getTableLen(int j)
{
  switch(j) {
    case A_BACK_MBY :
      return 29;
    case A_BACK_UBX :
    case A_L_LEG_UHZ:
    case A_L_LEG_MHX:
    case A_L_LEG_LHY:
    case A_L_LEG_KNY:
    case A_R_LEG_UHZ:
    case A_R_LEG_MHX:
    case A_R_LEG_LHY:
    case A_R_LEG_KNY:
      return 30;
    default:
      return 0;
  }
}
 
const void *Transmission::getTable(int j)
{
  switch (j) {
    case A_BACK_MBY: 
      return back_bky_table;
    case A_BACK_UBX:
      return back_bkx_table;
    case A_L_LEG_UHZ: 
      return l_leg_hpz_table; 
    case A_L_LEG_MHX: 
      return l_leg_hpx_table;
    case A_L_LEG_LHY: 
      return l_leg_hpy_table;
    case A_L_LEG_KNY: 
      return l_leg_kny_table; 
    case A_R_LEG_UHZ: 
      return r_leg_hpz_table; 
    case A_R_LEG_MHX: 
      return r_leg_hpx_table;
    case A_R_LEG_LHY: 
      return r_leg_hpy_table;
    case A_R_LEG_KNY: 
      return r_leg_kny_table;
    default:
      return NULL;
  }
}

bool Transmission::isAcuatorSide(int j)
{
  switch (j) {
    case A_BACK_MBY:
    case A_BACK_UBX:
    case A_L_LEG_UHZ:
    case A_L_LEG_MHX:
    case A_L_LEG_LHY:
    case A_L_LEG_KNY:
    case A_R_LEG_UHZ:
    case A_R_LEG_MHX:
    case A_R_LEG_LHY:
    case A_R_LEG_KNY:
/*
    case A_L_ARM_USY:
    case A_L_ARM_SHX:
    case A_L_ARM_ELY:
    case A_L_ARM_ELX:
    case A_L_ARM_UWY:
    case A_L_ARM_MWX:
    case A_R_ARM_USY:
    case A_R_ARM_SHX:
    case A_R_ARM_ELY:
    case A_R_ARM_ELX:
    case A_R_ARM_UWY:
    case A_R_ARM_MWX:
*/
      return true;
    default:
      return false;
  }
}

int Transmission::findCell(const double table[][3], int start, int end, double ang)
{
  int mid = (start+end)/2;
  double diff[2];
  if (ang >= table[end][0])
    return end;
  else if (ang <= table[start][0])
    return start;

  // just 2 numbers
  if (end - start == 1) {
    diff[0] = (table[start][0]-ang)*(table[start][0]-ang);
    diff[1] = (table[end][0]-ang)*(table[end][0]-ang);
    if (diff[0] < diff[1])
      return start;
    else
      return end;
  }

  if (ang < table[mid][0])
    return findCell(table, start, mid, ang);
  else if (ang > table[mid][0])
    return findCell(table, mid, end, ang);
  else
    return mid;
}

void Transmission::getTorqueLimit(int joint, double ang, double *min_torque, double *max_torque)
{
  double min_force;
  double max_force;
  double dl_dq = getMomentArm(joint, ang);
  if (dl_dq != 0) {
    max_force = (AreaPos[joint] * SUPPLY - AreaNeg[joint] * RETURN )* N_lb;
    min_force = (AreaPos[joint] * RETURN - AreaNeg[joint] * SUPPLY )* N_lb;
    *min_torque = min_force*dl_dq;
    *max_torque = max_force*dl_dq;  
  }
  // ankle, lbz and neck joint
  else {
    *min_torque = MaxTorqueNeg[joint];
    *max_torque = MaxTorquePos[joint];
  }
}

double Transmission::getMomentArm(int j, double ang)
{
  double l = 0;
  int idx = 0;
  
  const double (*table)[][3] = (const double (*)[][3])getTable(j);
  if (table) {
    idx = findCell(*table, getTableLen(j), ang);
    l = fabs((*table)[idx][2]);
  }
  else {
    if (j == A_L_ARM_USY || j == A_R_ARM_USY)
      l = 0.006998;
    if ((j >= A_L_ARM_SHX && j <= A_L_ARM_MWX) || 
        (j >= A_R_ARM_SHX && j <= A_R_ARM_MWX))
      l = 0.005123;
  }

  return l;
}


const double Transmission::back_bkx_table[ BACK_BKX_TABLE_LENGTH ][ 3 ] =
  {{ -0.83775800,0.23644906,-0.03037710 },
   { -0.77998161,0.23464698,-0.03199281 },
   { -0.72220522,0.23275353,-0.03353911 },
   { -0.66442883,0.23077287,-0.03501114 },
   { -0.60665244,0.22870943,-0.03640398 },
   { -0.54887605,0.22656791,-0.03771259 },
   { -0.49109963,0.22435336,-0.03893178 },
   { -0.43332320,0.22207107,-0.04005628 },
   { -0.37554678,0.21972667,-0.04108068 },
   { -0.31777036,0.21732610,-0.04199946 },
   { -0.25999394,0.21487565,-0.04280696 },
   { -0.20221752,0.21238188,-0.04349747 },
   { -0.14444110,0.20985176,-0.04406513 },
   { -0.08666468,0.20729253,-0.04450405 },
   { -0.02888827,0.20471178,-0.04480828 },
   { 0.02888814,0.20211750,-0.04497184 },
   { 0.08666456,0.19951798,-0.04498880 },
   { 0.14444098,0.19692186,-0.04485333 },
   { 0.20221740,0.19433810,-0.04455971 },
   { 0.25999382,0.19177601,-0.04410249 },
   { 0.31777024,0.18924518,-0.04347653 },
   { 0.37554666,0.18675551,-0.04267715 },
   { 0.43332309,0.18431714,-0.04170020 },
   { 0.49109951,0.18194042,-0.04054229 },
   { 0.54887593,0.17963590,-0.03920088 },
   { 0.60665232,0.17741421,-0.03767448 },
   { 0.66442871,0.17528607,-0.03596285 },
   { 0.72220510,0.17326215,-0.03406715 },
   { 0.77998149,0.17135301,-0.03199016 },
   { 0.83775789,0.16956900,-0.02973645 }};

/**************************************************************
back_bky.csv
Mapping from joint angle (rad) to length (m.) for DoF: back_bky

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::back_bky_table[ BACK_BKY_TABLE_LENGTH ][ 3 ] =
  {{ -0.71560246,0.10865265,0.03048160 },
   { -0.67219073,0.10996860,0.03013889 },
   { -0.62877899,0.11126892,0.02976264 },
   { -0.58536726,0.11255223,0.02935500 },
   { -0.54195553,0.11381720,0.02891801 },
   { -0.49854377,0.11506260,0.02845365 },
   { -0.45513201,0.11628728,0.02796388 },
   { -0.41172025,0.11749019,0.02745056 },
   { -0.36830848,0.11867032,0.02691553 },
   { -0.32489672,0.11982680,0.02636059 },
   { -0.28148496,0.12095878,0.02578750 },
   { -0.23807320,0.12206552,0.02519799 },
   { -0.19466144,0.12314634,0.02459377 },
   { -0.15124968,0.12420065,0.02397651 },
   { -0.10783792,0.12522790,0.02334789 },
   { -0.06442617,0.12622765,0.02270953 },
   { -0.02101441,0.12719950,0.02206305 },
   { 0.02239734,0.12814315,0.02141005 },
   { 0.06580909,0.12905833,0.02075211 },
   { 0.10922085,0.12994488,0.02009079 },
   { 0.15263259,0.13080266,0.01942762 },
   { 0.19604436,0.13163164,0.01876411 },
   { 0.23945612,0.13243183,0.01810174 },
   { 0.28286788,0.13320334,0.01744196 },
   { 0.32627964,0.13394627,0.01678617 },
   { 0.36969140,0.13466085,0.01613575 },
   { 0.41310316,0.13534734,0.01549202 },
   { 0.45651492,0.13600604,0.01485626 },
   { 0.49992669,0.13663733,0.01422967 }};

/**************************************************************
l_leg_hpx.csv
Mapping from joint angle (rad) to length (m.) for DoF: l_leg_hpx

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::l_leg_hpx_table[ L_LEG_HPX_TABLE_LENGTH ][ 3 ] =
  {{ -0.62831855,0.11291613,-0.02354866 },
   { -0.58498621,0.11187493,-0.02450474 },
   { -0.54165387,0.11079271,-0.02544177 },
   { -0.49832156,0.10967032,-0.02635870 },
   { -0.45498925,0.10850865,-0.02725445 },
   { -0.41165695,0.10730864,-0.02812792 },
   { -0.36832464,0.10607129,-0.02897794 },
   { -0.32499233,0.10479764,-0.02980330 },
   { -0.28166002,0.10348878,-0.03060273 },
   { -0.23832771,0.10214586,-0.03137492 },
   { -0.19499540,0.10077009,-0.03211845 },
   { -0.15166309,0.09936276,-0.03283187 },
   { -0.10833079,0.09792519,-0.03351360 },
   { -0.06499848,0.09645880,-0.03416200 },
   { -0.02166617,0.09496506,-0.03477529 },
   { 0.02166615,0.09344554,-0.03535162 },
   { 0.06499846,0.09190189,-0.03588895 },
   { 0.10833077,0.09033584,-0.03638513 },
   { 0.15166308,0.08874922,-0.03683784 },
   { 0.19499539,0.08714397,-0.03724458 },
   { 0.23832770,0.08552214,-0.03760263 },
   { 0.28166002,0.08388589,-0.03790908 },
   { 0.32499233,0.08223755,-0.03816075 },
   { 0.36832464,0.08057955,-0.03835420 },
   { 0.41165695,0.07891449,-0.03848570 },
   { 0.45498925,0.07724515,-0.03855120 },
   { 0.49832156,0.07557448,-0.03854629 },
   { 0.54165387,0.07390563,-0.03846621 },
   { 0.58498621,0.07224198,-0.03830580 },
   { 0.62831855,0.07058712,-0.03805947 }};

/**************************************************************
l_leg_hpy.csv
Mapping from joint angle (rad) to length (m.) for DoF: 

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::l_leg_hpy_table[ L_LEG_HPY_TABLE_LENGTH ][ 3 ] =
  {{ -1.94527411,0.17170052,0.02761430 },
   { -1.85235524,0.17437847,0.02998427 },
   { -1.75943637,0.17726466,0.03209376 },
   { -1.66651750,0.18033417,0.03392812 },
   { -1.57359862,0.18356104,0.03548046 },
   { -1.48067975,0.18691905,0.03675092 },
   { -1.38776088,0.19038221,0.03774572 },
   { -1.29484200,0.19392543,0.03847603 },
   { -1.20192313,0.19752479,0.03895706 },
   { -1.10900426,0.20115796,0.03920701 },
   { -1.01608539,0.20480441,0.03924631 },
   { -0.92316645,0.20844556,0.03909685 },
   { -0.83024752,0.21206494,0.03878134 },
   { -0.73732859,0.21564816,0.03832280 },
   { -0.64440966,0.21918304,0.03774409 },
   { -0.55149072,0.22265942,0.03706754 },
   { -0.45857179,0.22606923,0.03631464 },
   { -0.36565286,0.22940633,0.03550576 },
   { -0.27273393,0.23266640,0.03466003 },
   { -0.17981501,0.23584688,0.03379511 },
   { -0.08689609,0.23894672,0.03292725 },
   { 0.00602283,0.24196637,0.03207115 },
   { 0.09894174,0.24490753,0.03124006 },
   { 0.19186066,0.24777310,0.03044584 },
   { 0.28477958,0.25056699,0.02969911 },
   { 0.37769848,0.25329408,0.02900935 },
   { 0.47061741,0.25596005,0.02838512 },
   { 0.56353635,0.25857139,0.02783423 },
   { 0.65645528,0.26113522,0.02736391 },
   { 0.74937421,0.26365933,0.02698102 }};

/**************************************************************
l_leg_hpz.csv
Mapping from joint angle (rad) to length (m.) for DoF: l_leg_hpz

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::l_leg_hpz_table[ L_LEG_HPZ_TABLE_LENGTH ][ 3 ] =
  {{ -0.31415927,0.13750958,-0.00677863 },
   { -0.25638285,0.13709836,-0.00746060 },
   { -0.19860643,0.13664703,-0.00816635 },
   { -0.14083001,0.13615435,-0.00889146 },
   { -0.08305359,0.13561931,-0.00963128 },
   { -0.02527717,0.13504124,-0.01038102 },
   { 0.03249925,0.13441966,-0.01113582 },
   { 0.09027566,0.13375446,-0.01189078 },
   { 0.14805208,0.13304575,-0.01264098 },
   { 0.20582850,0.13229394,-0.01338155 },
   { 0.26360491,0.13149975,-0.01410759 },
   { 0.32138133,0.13066414,-0.01481424 },
   { 0.37915775,0.12978838,-0.01549663 },
   { 0.43693417,0.12887402,-0.01614983 },
   { 0.49471059,0.12792288,-0.01676886 },
   { 0.55248702,0.12693709,-0.01734863 },
   { 0.61026341,0.12591906,-0.01788389 },
   { 0.66803980,0.12487152,-0.01836920 },
   { 0.72581619,0.12379752,-0.01879882 },
   { 0.78359258,0.12270045,-0.01916670 },
   { 0.84136897,0.12158407,-0.01946632 },
   { 0.89914536,0.12045252,-0.01969065 },
   { 0.95692176,0.11931036,-0.01983200 },
   { 1.01469815,0.11816263,-0.01988188 },
   { 1.07247460,0.11701489,-0.01983083 },
   { 1.13025105,0.11587327,-0.01966816 },
   { 1.18802750,0.11474456,-0.01938174 },
   { 1.24580395,0.11363631,-0.01895762 },
   { 1.30358040,0.11255691,-0.01837963 },
   { 1.36135685,0.11151581,-0.01762886 }};

/**************************************************************
l_leg_kny.csv
Mapping from joint angle (rad) to length (m.) for DoF: l_leg_kny

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::l_leg_kny_table[ L_LEG_KNY_TABLE_LENGTH ][ 3 ] =
  {{ -0.23856905,0.26636496,-0.01717374 },
   { -0.13985083,0.26459414,-0.01872046 },
   { -0.04113260,0.26266545,-0.02037039 },
   { 0.05758563,0.26056921,-0.02211300 },
   { 0.15630385,0.25829697,-0.02393375 },
   { 0.25502208,0.25584188,-0.02581415 },
   { 0.35374030,0.25319910,-0.02773201 },
   { 0.45245853,0.25036615,-0.02966181 },
   { 0.55117679,0.24734330,-0.03157521 },
   { 0.64989501,0.24413361,-0.03344167 },
   { 0.74861324,0.24074329,-0.03522895 },
   { 0.84733146,0.23718183,-0.03690371 },
   { 0.94604969,0.23346199,-0.03843190 },
   { 1.04476786,0.22959992,-0.03977920 },
   { 1.14348602,0.22561522,-0.04091128 },
   { 1.24220419,0.22153075,-0.04179411 },
   { 1.34092236,0.21737283,-0.04239416 },
   { 1.43964052,0.21317099,-0.04267872 },
   { 1.53835869,0.20895793,-0.04261621 },
   { 1.63707685,0.20476942,-0.04217653 },
   { 1.73579502,0.20064409,-0.04133151 },
   { 1.83451319,0.19662327,-0.04005528 },
   { 1.93323135,0.19275069,-0.03832431 },
   { 2.03194952,0.18907234,-0.03611661 },
   { 2.13066769,0.18563640,-0.03340884 },
   { 2.22938585,0.18249373,-0.03016831 },
   { 2.32810402,0.17969958,-0.02633306 },
   { 2.42682219,0.17731866,-0.02176092 },
   { 2.52554035,0.17543869,-0.01609159 },
   { 2.62425852,0.17420870,-0.00832458 }};

/**************************************************************
r_leg_hpx.csv
Mapping from joint angle (rad) to length (m.) for DoF: r_leg_hpx

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::r_leg_hpx_table[ R_LEG_HPX_TABLE_LENGTH ][ 3 ] =
  {{ -0.62831855,0.07058712,0.03805947 },
   { -0.58498621,0.07224198,0.03830580 },
   { -0.54165387,0.07390563,0.03846621 },
   { -0.49832156,0.07557448,0.03854629 },
   { -0.45498925,0.07724515,0.03855120 },
   { -0.41165695,0.07891449,0.03848570 },
   { -0.36832464,0.08057955,0.03835420 },
   { -0.32499233,0.08223755,0.03816075 },
   { -0.28166002,0.08388589,0.03790908 },
   { -0.23832771,0.08552214,0.03760263 },
   { -0.19499540,0.08714397,0.03724458 },
   { -0.15166309,0.08874922,0.03683784 },
   { -0.10833079,0.09033583,0.03638513 },
   { -0.06499848,0.09190189,0.03588895 },
   { -0.02166617,0.09344554,0.03535162 },
   { 0.02166615,0.09496506,0.03477529 },
   { 0.06499846,0.09645879,0.03416200 },
   { 0.10833077,0.09792519,0.03351360 },
   { 0.15166308,0.09936276,0.03283187 },
   { 0.19499539,0.10077009,0.03211845 },
   { 0.23832770,0.10214586,0.03137492 },
   { 0.28166002,0.10348878,0.03060273 },
   { 0.32499233,0.10479764,0.02980330 },
   { 0.36832464,0.10607129,0.02897794 },
   { 0.41165695,0.10730864,0.02812792 },
   { 0.45498925,0.10850865,0.02725445 },
   { 0.49832156,0.10967032,0.02635870 },
   { 0.54165387,0.11079271,0.02544177 },
   { 0.58498621,0.11187493,0.02450474 },
   { 0.62831855,0.11291613,0.02354866 }};

/**************************************************************
r_leg_hpy.csv
Mapping from joint angle (rad) to length (m.) for DoF: r_leg_hpy

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::r_leg_hpy_table[ R_LEG_HPY_TABLE_LENGTH ][ 3 ] =
  {{ -1.94527411,0.17170052,0.02761430 },
   { -1.85235524,0.17437847,0.02998427 },
   { -1.75943637,0.17726466,0.03209376 },
   { -1.66651750,0.18033417,0.03392812 },
   { -1.57359862,0.18356104,0.03548046 },
   { -1.48067975,0.18691905,0.03675092 },
   { -1.38776088,0.19038221,0.03774572 },
   { -1.29484200,0.19392543,0.03847603 },
   { -1.20192313,0.19752479,0.03895706 },
   { -1.10900426,0.20115796,0.03920701 },
   { -1.01608539,0.20480441,0.03924631 },
   { -0.92316645,0.20844556,0.03909685 },
   { -0.83024752,0.21206494,0.03878134 },
   { -0.73732859,0.21564816,0.03832280 },
   { -0.64440966,0.21918304,0.03774409 },
   { -0.55149072,0.22265942,0.03706754 },
   { -0.45857179,0.22606923,0.03631464 },
   { -0.36565286,0.22940633,0.03550576 },
   { -0.27273393,0.23266640,0.03466003 },
   { -0.17981501,0.23584688,0.03379511 },
   { -0.08689609,0.23894672,0.03292725 },
   { 0.00602283,0.24196637,0.03207115 },
   { 0.09894174,0.24490753,0.03124006 },
   { 0.19186066,0.24777310,0.03044584 },
   { 0.28477958,0.25056699,0.02969911 },
   { 0.37769848,0.25329408,0.02900935 },
   { 0.47061741,0.25596005,0.02838512 },
   { 0.56353635,0.25857139,0.02783423 },
   { 0.65645528,0.26113522,0.02736391 },
   { 0.74937421,0.26365933,0.02698102 }};

/**************************************************************
r_leg_hpz.csv
Mapping from joint angle (rad) to length (m.) for DoF: r_leg_hpz

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::r_leg_hpz_table[ R_LEG_HPZ_TABLE_LENGTH ][ 3 ] =
  {{ -1.36135685,0.11151581,0.01762886 },
   { -1.30358040,0.11255692,0.01837963 },
   { -1.24580395,0.11363631,0.01895762 },
   { -1.18802750,0.11474457,0.01938174 },
   { -1.13025105,0.11587328,0.01966816 },
   { -1.07247460,0.11701489,0.01983083 },
   { -1.01469815,0.11816264,0.01988188 },
   { -0.95692176,0.11931036,0.01983200 },
   { -0.89914536,0.12045252,0.01969064 },
   { -0.84136897,0.12158407,0.01946631 },
   { -0.78359258,0.12270045,0.01916670 },
   { -0.72581619,0.12379752,0.01879882 },
   { -0.66803980,0.12487152,0.01836920 },
   { -0.61026341,0.12591906,0.01788389 },
   { -0.55248702,0.12693709,0.01734862 },
   { -0.49471059,0.12792289,0.01676885 },
   { -0.43693417,0.12887402,0.01614983 },
   { -0.37915775,0.12978838,0.01549663 },
   { -0.32138133,0.13066414,0.01481424 },
   { -0.26360491,0.13149975,0.01410759 },
   { -0.20582849,0.13229394,0.01338154 },
   { -0.14805207,0.13304575,0.01264098 },
   { -0.09027565,0.13375446,0.01189078 },
   { -0.03249923,0.13441966,0.01113582 },
   { 0.02527719,0.13504124,0.01038102 },
   { 0.08305360,0.13561931,0.00963128 },
   { 0.14083003,0.13615435,0.00889146 },
   { 0.19860645,0.13664703,0.00816635 },
   { 0.25638285,0.13709837,0.00746060 },
   { 0.31415927,0.13750958,0.00677862 }};

/**************************************************************
r_leg_kny.csv
Mapping from joint angle (rad) to length (m.) for DoF: r_leg_kny

	Data is in the following form, where l(i) is the actuator length evaluated q(i) and dl(i)/dq(i) is the derivative
	q0,l0,dl0/dq0
	q1,l1,dl1/dq1
	..,..,     ..
	qn,ln,dln/dqn
*/

const double Transmission::r_leg_kny_table[ R_LEG_KNY_TABLE_LENGTH ][ 3 ] =
  {{ -0.23856905,0.26636496,-0.01717374 },
   { -0.13985083,0.26459414,-0.01872046 },
   { -0.04113260,0.26266545,-0.02037039 },
   { 0.05758563,0.26056921,-0.02211300 },
   { 0.15630385,0.25829697,-0.02393375 },
   { 0.25502208,0.25584188,-0.02581415 },
   { 0.35374030,0.25319910,-0.02773201 },
   { 0.45245853,0.25036615,-0.02966181 },
   { 0.55117679,0.24734330,-0.03157521 },
   { 0.64989501,0.24413361,-0.03344167 },
   { 0.74861324,0.24074329,-0.03522895 },
   { 0.84733146,0.23718183,-0.03690371 },
   { 0.94604969,0.23346199,-0.03843190 },
   { 1.04476786,0.22959992,-0.03977920 },
   { 1.14348602,0.22561522,-0.04091128 },
   { 1.24220419,0.22153075,-0.04179411 },
   { 1.34092236,0.21737283,-0.04239416 },
   { 1.43964052,0.21317099,-0.04267872 },
   { 1.53835869,0.20895793,-0.04261621 },
   { 1.63707685,0.20476942,-0.04217653 },
   { 1.73579502,0.20064409,-0.04133151 },
   { 1.83451319,0.19662327,-0.04005528 },
   { 1.93323135,0.19275069,-0.03832431 },
   { 2.03194952,0.18907234,-0.03611661 },
   { 2.13066769,0.18563640,-0.03340884 },
   { 2.22938585,0.18249373,-0.03016831 },
   { 2.32810402,0.17969958,-0.02633306 },
   { 2.42682219,0.17731866,-0.02176092 },
   { 2.52554035,0.17543869,-0.01609159 },
   { 2.62425852,0.17420870,-0.00832458 }};

/**************************************************************/

// in^2
const double Transmission::AreaPos[N_JOINTS] = {
  0,
  0.7854,
  0.5891,
  0.7854,

  0.4199,
  0.5891,
  0.7854,
  0.5891,
  0.7854,
  0.7854,

  0.6163,
  0.7854,
  0.7854,
  0.5891,
  0.7854,
  0.7854,

  0.9940,
  1.7579,
  0.9940,
  0.9940,
  0.9940,
  0.7977,

  0.7977,
  1.5615,
  0.7977,
  0.7977,
  0.7977,
  0.7977
}; 

const double Transmission::AreaNeg[N_JOINTS] = {
  0,
  0.5891,
  0.7854,
  0.5891,

  0.6163,
  0.7854,
  0.5891,
  0.7854,
  0.5891,
  0.5891,

  0.4199,
  0.5891,
  0.5891,
  0.7854,
  0.5891,
  0.5891,

  0.7977,
  1.5615,
  0.7977,
  0.7977,
  0.7977,
  0.9940,

  0.9940,
  1.7579,
  0.9940,
  0.9940,
  0.9940,
  0.9940
};

// Nm
const double Transmission::MaxTorquePos[ N_JOINTS ] = {
  114,
  0,
  0,
  5,

  0,
  0,
  0,
  0,
  700, // bogus, need to implement ankle calcuation
  300, // bogus, need to implement ankle calcuation

  0,
  0,
  0,
  0,
  700, // bogus, need to implement ankle calcuation
  300, // bogus, need to implement ankle calcuation

  93,
  120,
  68,
  68,
  68,
  55,

  75,
  107,
  55,
  55,
  55,
  55
};

// Nm
const double Transmission::MaxTorqueNeg[ N_JOINTS ] = {
  -114,
  0,
  0,
  -5,

  0,
  0,
  0,
  0,
  -700, // bogus, need to implement ankle calcuation
  -300, // bogus, need to implement ankle calcuation

  0,
  0,
  0,
  0,
  -700, // bogus, need to implement ankle calcuation
  -300, // bogus, need to implement ankle calcuation

  -75,
  -107,
  -55,
  -55,
  -55,
  -68,

  -93,
  -120,
  -68,
  -68,
  -68,
  -68
};

/*
int Transmission::findCell(const double table[][ 3 ], int length, double angle)
{
  int best_cell = 0;
  double diff, diff2;
  double best_diff2 = 1e10;

  for (int i = 0; i < length; i++)
  {
    diff = table[ i ][ 0 ] - angle;
    diff2 = diff*diff;
    if ( diff2 < best_diff2 )
    {
      best_diff2 = diff2;
      best_cell = i;
    }
  }
  return best_cell;
}
*/
 
